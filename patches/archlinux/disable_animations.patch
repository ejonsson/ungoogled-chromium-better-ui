--- a/ui/gfx/animation/animation.cc
+++ b/ui/gfx/animation/animation.cc
@@ -97,6 +97,7 @@ void Animation::SetContainer(AnimationContainer* container) {
 }
 
 bool Animation::ShouldRenderRichAnimation() {
+  return false;
   if (rich_animation_rendering_mode_ == RichAnimationRenderMode::PLATFORM)
     return ShouldRenderRichAnimationImpl();
   return rich_animation_rendering_mode_ ==
@@ -107,7 +108,7 @@ bool Animation::ShouldRenderRichAnimation() {
 // static
 bool Animation::ShouldRenderRichAnimationImpl() {
   // Defined in platform specific file for Windows and OSX.
-  return true;
+  return false;
 }
 
 // static
--- a/ui/gfx/animation/linear_animation.cc
+++ b/ui/gfx/animation/linear_animation.cc
@@ -64,6 +64,7 @@ void LinearAnimation::End() {
 }
 
 void LinearAnimation::SetDuration(base::TimeDelta duration) {
+  return;
   duration_ = duration * g_duration_scale_factor;
   if (duration_ < timer_interval())
     duration_ = timer_interval();
--- a/ui/gfx/animation/multi_animation.h
+++ b/ui/gfx/animation/multi_animation.h
@@ -54,7 +54,7 @@
   using Parts = std::vector<Part>;
 
   static constexpr auto kDefaultTimerInterval =
-      base::TimeDelta::FromMilliseconds(20);
+      base::TimeDelta::FromMilliseconds(0);
 
   MultiAnimation(const Parts& parts, base::TimeDelta timer_interval);
   ~MultiAnimation() override;
--- a/ui/views/animation/ink_drop_impl.cc
+++ b/ui/views/animation/ink_drop_impl.cc
@@ -20,9 +20,9 @@
 // The duration for the highlight state fade in/out animations when they are
 // triggered by a hover changed event.
 constexpr auto kHighlightFadeInOnHoverChangeDuration =
-    base::TimeDelta::FromMilliseconds(250);
+    base::TimeDelta::FromMilliseconds(0);
 constexpr auto kHighlightFadeOutOnHoverChangeDuration =
-    base::TimeDelta::FromMilliseconds(250);
+    base::TimeDelta::FromMilliseconds(0);
 
 // The duration for the highlight state fade in/out animations when they are
 // triggered by a focus changed event.
@@ -32,21 +32,21 @@
 // The duration for showing/hiding the highlight when triggered by ripple
 // visibility changes for the HIDE_ON_RIPPLE AutoHighlightMode.
 constexpr auto kHighlightFadeInOnRippleHidingDuration =
-    base::TimeDelta::FromMilliseconds(250);
+    base::TimeDelta::FromMilliseconds(0);
 constexpr auto kHighlightFadeOutOnRippleShowingDuration =
-    base::TimeDelta::FromMilliseconds(120);
+    base::TimeDelta::FromMilliseconds(0);
 
 // The duration for showing/hiding the highlight when triggered by ripple
 // visibility changes for the SHOW_ON_RIPPLE AutoHighlightMode.
 constexpr auto kHighlightFadeInOnRippleShowingDuration =
-    base::TimeDelta::FromMilliseconds(250);
+    base::TimeDelta::FromMilliseconds(0);
 constexpr auto kHighlightFadeOutOnRippleHidingDuration =
-    base::TimeDelta::FromMilliseconds(120);
+    base::TimeDelta::FromMilliseconds(0);
 
 // The amount of time that |highlight_| should delay after a ripple animation
 // before fading in, for highlight due to mouse hover.
 constexpr auto kHoverFadeInAfterRippleDelay =
-    base::TimeDelta::FromMilliseconds(1000);
+    base::TimeDelta::FromMilliseconds(200);
 
 // Returns true if an ink drop with the given |ink_drop_state| should
 // automatically transition to the InkDropState::HIDDEN state.
--- a/ui/gfx/animation/slide_animation.h
+++ b/ui/gfx/animation/slide_animation.h
@@ -108,7 +108,7 @@
 
   // How long a hover in/out animation will last for. This can be overridden
   // with SetSlideDuration().
-  base::TimeDelta slide_duration_ = base::TimeDelta::FromMilliseconds(120);
+  base::TimeDelta slide_duration_ = base::TimeDelta::FromMilliseconds(0);
 
   // Dampens the reduction in duration for animations which start partway.
   double dampening_value_ = 1.0;