--- a/chrome/browser/ui/layout_constants.cc
+++ b/chrome/browser/ui/layout_constants.cc
@@ -64,7 +64,7 @@
     case TAB_ALERT_INDICATOR_ICON_WIDTH:
       return touch_ui ? 12 : 16;
     case TAB_HEIGHT:
-      return (touch_ui ? 41 : 34) + GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP);
+      return (touch_ui ? 41 : 32) + GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP);
     case TAB_PRE_TITLE_PADDING:
       return 8;
     case TAB_STACK_DISTANCE:
--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -15,7 +15,7 @@ constexpr int kSeparatorThickness = 1;
 
 // Returns the height of the separator between tabs.
 int GetSeparatorHeight() {
-  return ui::MaterialDesignController::touch_ui() ? 24 : 20;
+  return ui::MaterialDesignController::touch_ui() ? 24 : 28;
 }
 
 }  // namespace
@@ -66,10 +66,10 @@ gfx::Size TabStyle::GetPreviewImageSize() {
 // static
 int TabStyle::GetCornerRadius() {
   return views::LayoutProvider::Get()->GetCornerRadiusMetric(
-      views::EMPHASIS_HIGH);
+      views::EMPHASIS_LOW);
 }
 
 // static
 int TabStyle::GetContentsHorizontalInsetSize() {
-  return GetCornerRadius() * 2;
+  return GetCornerRadius() * 4;
 }
--- a/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm
+++ b/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm
@@ -121,7 +121,7 @@ gfx::Rect BrowserNonClientFrameViewMac::GetBoundsForTabStripRegion(
   // calling through private APIs.
   DCHECK(tabstrip);
 
-  constexpr int kTabstripLeftInset = 70;  // Make room for caption buttons.
+  constexpr int kTabstripLeftInset = 74;  // Make room for caption buttons.
   // Do not draw caption buttons on fullscreen.
   const int x = frame()->IsFullscreen() ? 0 : kTabstripLeftInset;
   const bool restored = !frame()->IsMaximized() && !frame()->IsFullscreen();
@@ -143,7 +143,7 @@ int BrowserNonClientFrameViewMac::GetTopInset(bool restored) const {
 
   // Mac seems to reserve 1 DIP of the top inset as a resize handle.
   constexpr int kResizeHandleHeight = 1;
-  constexpr int kTabstripTopInset = 8;
+  constexpr int kTabstripTopInset = 0;
   int top_inset = kTabstripTopInset;
   if (EverHasVisibleBackgroundTabShapes()) {
     top_inset =
--- a/chrome/browser/ui/views/location_bar/location_bar_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.cc
@@ -115,7 +115,6 @@
 #include "ui/views/button_drag_utils.h"
 #include "ui/views/controls/button/image_button.h"
 #include "ui/views/controls/button/image_button_factory.h"
-#include "ui/views/controls/focus_ring.h"
 #include "ui/views/controls/highlight_path_generator.h"
 #include "ui/views/controls/label.h"
 #include "ui/views/widget/widget.h"
@@ -152,21 +151,6 @@
       profile_(profile),
       delegate_(delegate),
       is_popup_mode_(is_popup_mode) {
-  if (!is_popup_mode_) {
-    focus_ring_ = views::FocusRing::Install(this);
-    focus_ring_->SetHasFocusPredicate([](View* view) -> bool {
-      DCHECK_EQ(view->GetClassName(), LocationBarView::kViewClassName);
-      auto* v = static_cast<LocationBarView*>(view);
-
-      // Show focus ring when the Omnibox is visibly focused and the popup is
-      // closed.
-      return v->omnibox_view_->model()->is_caret_visible() &&
-             !v->GetOmniboxPopupView()->IsOpen();
-    });
-
-    focus_ring_->SetPathGenerator(
-        std::make_unique<views::PillHighlightPathGenerator>());
-  }
   md_observer_.Add(ui::MaterialDesignController::GetInstance());
 }
 
@@ -321,7 +305,7 @@
 
 int LocationBarView::GetBorderRadius() const {
   return ChromeLayoutProvider::Get()->GetCornerRadiusMetric(
-      views::EMPHASIS_MAXIMUM, size());
+      views::EMPHASIS_LOW, size());
 }
 
 std::unique_ptr<views::Background> LocationBarView::CreateRoundRectBackground(
@@ -1083,9 +1067,6 @@
   // The location icon may change when the popup visibility changes.
   location_icon_view_->Update(/*suppress_animations=*/false);
 
-  // The focus ring may be hidden or shown when the popup visibility changes.
-  if (focus_ring_)
-    focus_ring_->SchedulePaint();
 
   // We indent the textfield when the popup is open to align to suggestions.
   Layout();
@@ -1099,8 +1080,6 @@
 }
 
 void LocationBarView::OnOmniboxFocused() {
-  if (focus_ring_)
-    focus_ring_->SchedulePaint();
 
   // Only show hover animation in unfocused steady state.  Since focusing
   // the omnibox is intentional, snapping is better than transitioning here.
@@ -1114,8 +1093,6 @@
 }
 
 void LocationBarView::OnOmniboxBlurred() {
-  if (focus_ring_)
-    focus_ring_->SchedulePaint();
   UpdateSendTabToSelfIcon();
   RefreshBackground();
 }
--- a/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
@@ -263,7 +263,7 @@
 
 gfx::Insets OmniboxMatchCellView::GetInsets() const {
   const bool single_line = layout_style_ == LayoutStyle::ONE_LINE_SUGGESTION;
-  const int vertical_margin = single_line ? 8 : 4;
+  const int vertical_margin = single_line ? 4 : 4;
   return gfx::Insets(vertical_margin, 4, vertical_margin,
                      OmniboxMatchCellView::kMarginRight);
 }
--- a/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
+++ b/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
@@ -197,7 +197,7 @@ int RoundedOmniboxResultsFrame::GetNonResultSectionHeight() {
 // static
 gfx::Insets RoundedOmniboxResultsFrame::GetLocationBarAlignmentInsets() {
   return ui::MaterialDesignController::touch_ui() ? gfx::Insets(6, 1, 5, 1)
-                                                  : gfx::Insets(4, 6);
+                                                  : gfx::Insets(0, 0);
 }
 
 // static
--- a/chrome/browser/ui/views/tabs/glow_hover_controller.cc
+++ b/chrome/browser/ui/views/tabs/glow_hover_controller.cc
@@ -32,8 +32,8 @@ void GlowHoverController::SetAnimationContainer(
 
 void GlowHoverController::SetLocation(const gfx::Point& location) {
   location_ = location;
-  if (ShouldDraw())
-    view_->SchedulePaint();
+  // if (ShouldDraw())
+  //   view_->SchedulePaint();
 }
 
 void GlowHoverController::SetSubtleOpacityScale(double opacity_scale) {
@@ -42,7 +42,7 @@
   switch (style) {
     case TabStyle::ShowHoverStyle::kSubtle:
       opacity_scale_ = subtle_opacity_scale_;
-      animation_.SetSlideDuration(base::TimeDelta::FromMilliseconds(200));
+      animation_.SetSlideDuration(base::TimeDelta::FromMilliseconds(0));
       animation_.SetTweenType(gfx::Tween::EASE_OUT);
       animation_.Show();
       break;
--- a/chrome/browser/ui/views/tabs/new_tab_button.cc
+++ b/chrome/browser/ui/views/tabs/new_tab_button.cc
@@ -73,8 +73,12 @@
 
   // views::HighlightPathGenerator:
   SkPath GetHighlightPath(const views::View* view) override {
-    return static_cast<const NewTabButton*>(view)->GetBorderPath(
-        view->GetContentsBounds().origin(), 1.0f, false);
+    const gfx::Rect bounds = view->GetContentsBounds();
+    const gfx::Point center = bounds.CenterPoint();
+    const int radius = views::LayoutProvider::Get()->GetCornerRadiusMetric(
+        views::EMPHASIS_LOW, bounds.size());
+        //SkPath().addRoundRect(rect, corner_radius, corner_radius)
+    return SkPath().addRoundRect(gfx::RectToSkRect(bounds), radius, radius);
   }
 
  private:
@@ -93,8 +97,8 @@
       AddChildView(std::make_unique<views::InkDropContainerView>());
 
   SetInkDropMode(InkDropMode::ON);
-  set_ink_drop_highlight_opacity(0.16f);
-  set_ink_drop_visible_opacity(0.14f);
+  set_ink_drop_highlight_opacity(0.2f);
+  set_ink_drop_visible_opacity(0.2f);
 
   SetInstallFocusRingOnFocus(true);
   views::HighlightPathGenerator::Install(
@@ -209,13 +213,7 @@
 }
 
 bool NewTabButton::GetHitTestMask(SkPath* mask) const {
-  DCHECK(mask);
-
-  const float scale = GetWidget()->GetCompositor()->device_scale_factor();
-  // TODO(pkasting): Fitts' Law horizontally when appropriate.
-  SkPath border = GetBorderPath(GetContentsBounds().origin(), scale,
-                                tab_strip_->controller()->IsFrameCondensed());
-  mask->addPath(border, SkMatrix::MakeScale(1 / scale));
+  mask->addRect(gfx::RectToSkRect(GetMirroredRect(GetContentsBounds())));
   return true;
 }
 
@@ -233,7 +231,7 @@
 
 int NewTabButton::GetCornerRadius() const {
   return ChromeLayoutProvider::Get()->GetCornerRadiusMetric(
-      views::EMPHASIS_MAXIMUM, GetContentsBounds().size());
+      views::EMPHASIS_LOW, GetContentsBounds().size());
 }
 
 void NewTabButton::PaintFill(gfx::Canvas* canvas) const {
@@ -283,7 +281,7 @@
   flags.setStrokeWidth(kStrokeWidth);
 
   const int radius = ui::MaterialDesignController::touch_ui() ? 7 : 6;
-  const int offset = GetCornerRadius() - radius;
+  const int offset = GetCornerRadius() + 4;
   // The cap will be added outside the end of the stroke; inset to compensate.
   constexpr int kCapRadius = kStrokeWidth / 2;
   const int start = offset + kCapRadius;
@@ -327,8 +325,13 @@
                 -diameter, 0);
     path.close();
   } else {
-    path.addCircle(scaled_origin.x() + radius, scaled_origin.y() + radius,
-                   radius);
+    path.moveTo(scaled_origin.x(), 0);
+    const float diameter = radius * 2;
+    path.rLineTo(diameter, 0);
+    path.rLineTo(0, scaled_origin.y() + (diameter - 1));
+    path.rLineTo(-diameter, 0);
+    path.close();
+    //path.addCircle(scaled_origin.x() + radius, scaled_origin.y() + radius, radius);
   }
   return path;
 }
--- a/chrome/browser/ui/views/tabs/tab_close_button.cc
+++ b/chrome/browser/ui/views/tabs/tab_close_button.cc
@@ -46,7 +46,7 @@
     const gfx::Rect bounds = view->GetContentsBounds();
     const gfx::Point center = bounds.CenterPoint();
     const int radius = views::LayoutProvider::Get()->GetCornerRadiusMetric(
-        views::EMPHASIS_MAXIMUM, bounds.size());
+        views::EMPHASIS_LOW, bounds.size());
     return SkPath().addCircle(center.x(), center.y(), radius);
   }
 
@@ -65,8 +65,8 @@
   SetFocusBehavior(FocusBehavior::ACCESSIBLE_ONLY);
 
   SetInkDropMode(InkDropMode::ON);
-  set_ink_drop_highlight_opacity(0.16f);
-  set_ink_drop_visible_opacity(0.14f);
+  set_ink_drop_highlight_opacity(0.2f);
+  set_ink_drop_visible_opacity(0.2f);
 
   // Disable animation so that the hover indicator shows up immediately to help
   // avoid mis-clicks.
@@ -145,8 +145,8 @@
   const gfx::Rect bounds = GetContentsBounds();
   const int radius = views::LayoutProvider::Get()->GetCornerRadiusMetric(
       views::EMPHASIS_MAXIMUM, bounds.size());
-  return std::make_unique<views::CircleInkDropMask>(
-      size(), GetMirroredRect(bounds).CenterPoint(), radius);
+  return std::make_unique<views::RoundRectInkDropMask>(
+      size(), GetInsets(), 2);
 }
 
 void TabCloseButton::PaintButtonContents(gfx::Canvas* canvas) {
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -563,8 +563,8 @@
   // In addition, separators should smoothly fade in and out between states,
   // particularly during the hover animation.
 
-  float leading_opacity = GetSeparatorOpacity(for_layout, true);
-  float trailing_opacity = GetSeparatorOpacity(for_layout, false);
+  float leading_opacity = 1.0f;
+  float trailing_opacity = 1.0f;
 
   // Return the opacities in physical order, rather than logical.
   if (base::i18n::IsRTL())
--- a/chrome/browser/ui/views/toolbar/app_menu.cc
+++ b/chrome/browser/ui/views/toolbar/app_menu.cc
@@ -89,7 +89,7 @@ using views::View;
 namespace {
 
 // Horizontal padding on the edges of the in-menu buttons.
-const int kHorizontalPadding = 15;
+const int kHorizontalPadding = 10;
 
 #if defined(OS_CHROMEOS)
 // Extra horizontal space to reserve for the fullscreen button.
--- a/chrome/browser/ui/views/toolbar/toolbar_ink_drop_util.h
+++ b/chrome/browser/ui/views/toolbar/toolbar_ink_drop_util.h
@@ -20,7 +20,7 @@
 }  // namespace views
 
 constexpr float kToolbarInkDropVisibleOpacity = 0.06f;
-constexpr float kToolbarInkDropHighlightVisibleOpacity = 0.08f;
+constexpr float kToolbarInkDropHighlightVisibleOpacity = 0.2f;
 constexpr SkAlpha kToolbarButtonBackgroundAlpha = 32;
 
 // Creates insets for a host view so that when insetting from the host view
--- a/chrome/browser/ui/views/toolbar/toolbar_ink_drop_util.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_ink_drop_util.cc
@@ -50,7 +50,7 @@
   rect.Inset(GetToolbarInkDropInsets(host_view, margin_insets));
 
   const int radii = ChromeLayoutProvider::Get()->GetCornerRadiusMetric(
-      views::EMPHASIS_MAXIMUM, rect.size());
+      views::EMPHASIS_LOW, rect.size());
 
   auto path = std::make_unique<SkPath>();
   path->addRoundRect(gfx::RectToSkRect(rect), radii, radii);
--- a/ui/views/layout/layout_provider.cc
+++ b/ui/views/layout/layout_provider.cc
@@ -150,9 +150,9 @@
     case EMPHASIS_MEDIUM:
       return 4;
     case EMPHASIS_HIGH:
-      return 8;
+      return 4;
     case EMPHASIS_MAXIMUM:
-      return std::min(size.width(), size.height()) / 2;
+      return 4;
   }
 }
 
@@ -166,9 +166,9 @@
     case views::EMPHASIS_MEDIUM:
       return 2;
     case views::EMPHASIS_HIGH:
-      return 3;
+      return 2;
     case views::EMPHASIS_MAXIMUM:
-      return 16;
+      return 2;
   }
 }
 